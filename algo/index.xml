<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Algoes on </title>
    <link>http://localhost:1313/algo/</link>
    <description>Recent content in Algoes on </description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Sun, 16 Apr 2023 22:07:32 +0800</lastBuildDate>
    <atom:link href="http://localhost:1313/algo/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>堆</title>
      <link>http://localhost:1313/algo/%E5%A0%86/</link>
      <pubDate>Sun, 16 Apr 2023 00:03:47 +0800</pubDate>
      <guid>http://localhost:1313/algo/%E5%A0%86/</guid>
      <description>操作 插入1个数 求集合中的最小值 删除最小值 删除任意值(STL 无法直接实现) 修改任意值(STL 无法直接实现) 存储方式 数组存储, 下标从1开始; 父节</description>
    </item>
    <item>
      <title>Trie</title>
      <link>http://localhost:1313/algo/trie/</link>
      <pubDate>Sat, 15 Apr 2023 22:15:47 +0800</pubDate>
      <guid>http://localhost:1313/algo/trie/</guid>
      <description>字典树？ acwing 算法基础课 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 #include &amp;lt;iostream&amp;gt; #include &amp;lt;stdio.h&amp;gt; using namespace std; const int N = 100010;</description>
    </item>
    <item>
      <title>并查集</title>
      <link>http://localhost:1313/algo/%E5%B9%B6%E6%9F%A5%E9%9B%86/</link>
      <pubDate>Sat, 15 Apr 2023 22:15:47 +0800</pubDate>
      <guid>http://localhost:1313/algo/%E5%B9%B6%E6%9F%A5%E9%9B%86/</guid>
      <description>主要操作 合并两个集合 查询 两个元素是否在同一个集合 并查集优化(路径压缩) WHY: 防止查询父节点时间过长 HOW: 让路径的店直接指向根节点 代码实现: 1 2 3 4 5</description>
    </item>
    <item>
      <title>并查集</title>
      <link>http://localhost:1313/algo/%E6%8E%92%E5%BA%8F/</link>
      <pubDate>Sat, 15 Apr 2023 22:15:47 +0800</pubDate>
      <guid>http://localhost:1313/algo/%E6%8E%92%E5%BA%8F/</guid>
      <description>acwing 基础课 第一章 基础算法(一) 快排 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 void quick_sort(int *q, int l, int r) { // 边界处理, 记住其中一种即可 // 取端点可能会</description>
    </item>
    <item>
      <title>算法STL</title>
      <link>http://localhost:1313/algo/stl/</link>
      <pubDate>Sat, 15 Apr 2023 22:15:47 +0800</pubDate>
      <guid>http://localhost:1313/algo/stl/</guid>
      <description>不管读字符还是读字符串都用%s来读取 1 2 3 // 读取 I abc char op[2]; scanf(&amp;#34;%s%s&amp;#34;, op, str); 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/algo/%E6%95%B4%E6%95%B0_%E6%B5%AE%E7%82%B9%E6%95%B0_%E4%BA%8C%E5%88%86/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/algo/%E6%95%B4%E6%95%B0_%E6%B5%AE%E7%82%B9%E6%95%B0_%E4%BA%8C%E5%88%86/</guid>
      <description></description>
    </item>
  </channel>
</rss>
