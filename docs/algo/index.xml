<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Algoes on </title>
    <link>http://localhost:1313/algo/</link>
    <description>Recent content in Algoes on </description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Sun, 16 Apr 2023 22:07:32 +0800</lastBuildDate>
    <atom:link href="http://localhost:1313/algo/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>堆</title>
      <link>http://localhost:1313/algo/%E5%A0%86/</link>
      <pubDate>Sun, 16 Apr 2023 00:03:47 +0800</pubDate>
      <guid>http://localhost:1313/algo/%E5%A0%86/</guid>
      <description>操作 插入1个数 求集合中的最小值 删除最小值 删除任意值(STL 无法直接实现) 修改任意值(STL 无法直接实现) 存储方式 数组存储, 下标从1开始;&#xA;父节点为 x 则，左儿子为 2x, 右儿子为 2x+1：&#xA;接口 up : 节点上移动&#xA;down : 节点下移&#xA;插入 插入值 := 末尾位置插入 , size++, 然后 up&#xA;删除 最小值(小根堆) := 删除末位置，size-1, 然后从根down&#xA;删除k 位置值 := heap[k] = heap[size]; size&amp;ndash;; down(); up() &amp;ndash;&amp;gt; down\up 只会执行一次&#xA;修改k 位置值 := heap[k] = x; down(); up() &amp;ndash;&amp;gt; down\up 只会执行一次&#xA;特征 堆是完全二叉树(除最后一层其他层满，最后一层从左往右排列)&#xA;建立堆 正常方式 逐个插入建堆, 时间复杂度O(n*log n)&#xA;快速方式 读入 从 n/2 -&amp;gt; 1 处 开始执行down操作, 时间复杂度 O(n) 证明: 递推</description>
    </item>
    <item>
      <title>Trie</title>
      <link>http://localhost:1313/algo/trie/</link>
      <pubDate>Sat, 15 Apr 2023 22:15:47 +0800</pubDate>
      <guid>http://localhost:1313/algo/trie/</guid>
      <description>字典树？&#xA;acwing 算法基础课&#xA;1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 #include &amp;lt;iostream&amp;gt; #include &amp;lt;stdio.h&amp;gt; using namespace std; const int N = 100010; // 子节点编号(索引) int son[N][26]; int cnt[N]; // 当前使用节点的索引 // 索引为0的点既是根节点 也是空节点 int idx; int insert(const char* s) { int p = 0; for (int i = 0; s[i]; i++) { int u = s[i] - &amp;#39;a&amp;#39;; if (!</description>
    </item>
    <item>
      <title>并查集</title>
      <link>http://localhost:1313/algo/%E5%B9%B6%E6%9F%A5%E9%9B%86/</link>
      <pubDate>Sat, 15 Apr 2023 22:15:47 +0800</pubDate>
      <guid>http://localhost:1313/algo/%E5%B9%B6%E6%9F%A5%E9%9B%86/</guid>
      <description>主要操作 合并两个集合 查询 两个元素是否在同一个集合 并查集优化(路径压缩) WHY: 防止查询父节点时间过长&#xA;HOW: 让路径的店直接指向根节点&#xA;代码实现:&#xA;1 2 3 4 5 6 7 8 9 # tips: find的同时实现路径压缩 int find(int x) { // 压缩路径 if (p[x] != x) p[x] = find(p[x]); // 此时父节点就是新的父节点 return p[x]; } 按秩优化(无用) 让矮的树接到高的树&#xA;基本模板题 合并集合 连通块中点的数量 练习题 食物链&#xA;WHY: 为什么 find的时候 需要 d[x] = d[p[x]] ANS: 因为dx 是与父节点之间的距离，合并两棵树时，dx 并一定为 1, 因此后续压缩路径的时候dx并不一定为1</description>
    </item>
    <item>
      <title>并查集</title>
      <link>http://localhost:1313/algo/%E6%8E%92%E5%BA%8F/</link>
      <pubDate>Sat, 15 Apr 2023 22:15:47 +0800</pubDate>
      <guid>http://localhost:1313/algo/%E6%8E%92%E5%BA%8F/</guid>
      <description>acwing 基础课 第一章 基础算法(一) 快排 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 void quick_sort(int *q, int l, int r) { // 边界处理, 记住其中一种即可 // 取端点可能会退化为O(n) // 左端点要用 (l,j), (j+1,r) // int x = q[l]; // 右端点要用 (l,i-1), (i,r) // int x = q[r]; // int x = q[(l+r+1) &amp;gt;&amp;gt; 1]; int x = q[rand() % (r - l + 1) + l]; // off-the-end, 后面直接先增加 int i = l - 1; int j = r + 1; if (l &amp;gt;= r) return; while (i &amp;lt; j) { do i++; while (q[i] &amp;lt; x); do j--; while (q[j] &amp;gt; x); if (i &amp;lt; j) swap(q[i], q[j]); } quick_sort(q, l, j); quick_sort(q, j+1, r); } </description>
    </item>
    <item>
      <title>算法STL</title>
      <link>http://localhost:1313/algo/stl/</link>
      <pubDate>Sat, 15 Apr 2023 22:15:47 +0800</pubDate>
      <guid>http://localhost:1313/algo/stl/</guid>
      <description>不管读字符还是读字符串都用%s来读取&#xA;1 2 3 // 读取 I abc char op[2]; scanf(&amp;#34;%s%s&amp;#34;, op, str); 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 vector 支持[] size() empty() clear() 清空 front()/back() 数组头尾元素 push_back()/pop_back begin()/end() 首尾元素 支持字典序比较 pair first 第一个元素 second 第二个元素 string size()/length 返回长度 empty() clear() substr(a,b) 得到一个下标位a长度位b的子字符串 substr(a) 得到一个下表为a长度取最长的子字符串 c_str() 取string定义数组的首地址 queue size() empty() push() 在队尾插入一个元素 front()/back() 返回队头/队尾元素 pop() 弹出队头元素 priority_queue 优先队列(堆) 默认大根堆 size() empty() push() top() pop() 定义小根堆: priority_queue&amp;lt;int , vector&amp;lt;int&amp;gt; , greater&amp;lt;int&amp;gt;&amp;gt; stack size() empty() push() pop() top() deque 支持[] size() empty() clear() front()/back() 头尾元素 push_back()/push_front() 在头尾插入 begin()/end() set , map , multimap , multiset , 基于平衡二叉树 (红黑树) 维护一个有序数列 大部分函数时间复杂度都是logn (因为是树) size() empty() clear() begin()/end() 支持++ -- 时间复杂度 O(logn) lower_bound()/upper_bound() lower_bound(x) 返回一个大于等于x的最小值 upper_bound(x) 返回一个大于x的最小值 set / multiset set不支持重复数插入 插入重复数直接跳过 insert() 插入一个数 find() 查找一个数 count() 返回一个数存入的个数 erase() (1) 输入是一个x , 删除全部x , 时间复杂度 O(k + logn) (2) 输入是一个迭代器 , 删除这个迭代器 map / multimap insert() 插入的是一个pair erase() 输入的参数是pair 或者 迭代器 find() 支持[] unordered_set , unordered_map , unordered_multiset , unordered_multimap 基本跟上面一个一样 查找删改时间复杂度是 O(1) 不支持lower_bound()/upper_bound() 迭代器的++ -- bitset 压位 bitset&amp;lt;放大小&amp;gt; s; 初始化时候全为0 —— false; ~取反 &amp;amp;且 |或 ^异或 == , !</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/algo/%E6%95%B4%E6%95%B0_%E6%B5%AE%E7%82%B9%E6%95%B0_%E4%BA%8C%E5%88%86/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/algo/%E6%95%B4%E6%95%B0_%E6%B5%AE%E7%82%B9%E6%95%B0_%E4%BA%8C%E5%88%86/</guid>
      <description></description>
    </item>
  </channel>
</rss>
