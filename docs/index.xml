<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Early is on Time</title>
    <link>https://psuvtk.github.io/</link>
    <description>Recent content on Early is on Time</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 14 Jul 2023 00:02:47 +0800</lastBuildDate><atom:link href="https://psuvtk.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>WHO AM I</title>
      <link>https://psuvtk.github.io/about/</link>
      <pubDate>Sat, 29 Jul 2023 19:28:46 +0800</pubDate>
      
      <guid>https://psuvtk.github.io/about/</guid>
      <description>年龄 27 (1995~)
教育背景 2014.9 ~ 2018.7 本科 哈尔滨工业大学(威海) 电子信息工程
2018.9 ~ 2020.6 硕士 哈尔滨工业大学(威海) 电子与通信工程
工作履历 底层软件工程师(SDE)、系统工程师(SE)、资源组PL @ 华为技术有限公司
工作内容  202007~202109 RRU业务维测特性Owner, 熟悉维测相关机制实现; 202109~至今 启动与业务初始化SE, 熟悉从上电至业务启动全流程方案; 熟悉安全启动全流程设计; 负责内核驱动编写与维护; 独立完成基于Arm Cortex-M4的BootLoader方案设计及代码实现;  语言 精通C语言;
熟练使用C++11, 了解C++14\17\20;
熟练使用Python语言;
熟练使用Shell脚本编程;
熟练使用Lua、Rust、Go语言;
项目经历 Linux开发  熟悉Ethernet(MAC)\ESPI\Localbus\UART\I2C\SPI\WDT\FLASH\中断等用户态、内核态驱动开发及调试; 熟悉GIC驱动; 熟悉 SPI-NOR/MTD 子系统; 熟悉使用UIO MAP实现用户态驱动; 熟悉TUN\TAP网络虚拟化; 熟悉Qemu, 能够基于Qemu完成单板外设仿真; 熟悉GDB、JTAG等工具的使用，具备良好的问题定位及解决能力； 熟悉内核编译、裁剪, 熟悉根文件系统制作; 熟悉安全启动的整体解决方案，  MCU开发经验  熟悉Cortex-M3\M4芯片架构，基于Cortex-M4架构芯片的5G分布式居民区解决方案(DRS：Distributed Residential Solution)头端BOOTLOADER设计与开发; 熟悉Cortex-M23\M33芯片架构，基于Cortex-M23架构芯片的射频单元休眠监控子系统的设计开发;  应用层开发 1、负责基于DOPRA中间件的应用层软件开发，熟悉多线程编程; 2、维护、开发射频单元维测子系统、日志子系统、异常监控子系统等应用层软件特性;
通用软件技能 ELF文件格式</description>
    </item>
    
    <item>
      <title>CMAKE</title>
      <link>https://psuvtk.github.io/posts/cmake/</link>
      <pubDate>Fri, 14 Jul 2023 00:02:47 +0800</pubDate>
      
      <guid>https://psuvtk.github.io/posts/cmake/</guid>
      <description>模板 cmake_minimum_required(VERSION 3.11)project(ProjectName)target_link_libraries(ProjectName libarchive)target_include_directories(ProjectName ${CMAKE_SOURCE_DIR}/include)链接静态库 target_link_libraries(csgo ${CMAKE_SOURCE_DIR}/libarchive_static.a )</description>
    </item>
    
    <item>
      <title>使用libarchive</title>
      <link>https://psuvtk.github.io/posts/libarchive/</link>
      <pubDate>Fri, 14 Jul 2023 00:02:47 +0800</pubDate>
      
      <guid>https://psuvtk.github.io/posts/libarchive/</guid>
      <description>安装 msys2 (WIN + MinGW) pacman -S libarchive源码编译 TODO</description>
    </item>
    
    <item>
      <title>MCU裸机编程的代码架构</title>
      <link>https://psuvtk.github.io/posts/25.-mcu%E8%BD%AF%E4%BB%B6%E7%9A%84%E8%BF%90%E8%A1%8C%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Sun, 11 Jun 2023 00:02:47 +0800</pubDate>
      
      <guid>https://psuvtk.github.io/posts/25.-mcu%E8%BD%AF%E4%BB%B6%E7%9A%84%E8%BF%90%E8%A1%8C%E6%A8%A1%E5%BC%8F/</guid>
      <description>MCU裸机开发常用的系统架构:
1、轮训模式 对外部事件进行轮训
2、前后台模式 中断处理外部时间，后台循环处理其他事务
3、定时器模式 采用定时器来管理
时间基准：
 框架调用用户注册的回调获取 TICK 用户(中断)周期性回调框架接口增加TICK计数  MultiTimer https://github.com/0x1abin/MultiTimer
4、分级状态机、状态机 顶层状态机判断系统忙闲状态 做节能处理；</description>
    </item>
    
    <item>
      <title>UIO 用户态驱动</title>
      <link>https://psuvtk.github.io/posts/26.-uio_map/</link>
      <pubDate>Sun, 11 Jun 2023 00:02:47 +0800</pubDate>
      
      <guid>https://psuvtk.github.io/posts/26.-uio_map/</guid>
      <description>__uio_register_device</description>
    </item>
    
    <item>
      <title>堆</title>
      <link>https://psuvtk.github.io/algo/%E5%A0%86/</link>
      <pubDate>Sun, 16 Apr 2023 00:03:47 +0800</pubDate>
      
      <guid>https://psuvtk.github.io/algo/%E5%A0%86/</guid>
      <description>操作  插入1个数 求集合中的最小值 删除最小值 删除任意值(STL 无法直接实现) 修改任意值(STL 无法直接实现)  存储方式 数组存储, 下标从1开始;
父节点为 x 则，左儿子为 2x, 右儿子为 2x+1：
接口 up : 节点上移动
down : 节点下移
插入 插入值 := 末尾位置插入 , size++, 然后 up
删除 最小值(小根堆) := 删除末位置，size-1, 然后从根down
删除k 位置值 := heap[k] = heap[size]; size&amp;ndash;; down(); up() &amp;ndash;&amp;gt; down\up 只会执行一次
修改k 位置值 := heap[k] = x; down(); up() &amp;ndash;&amp;gt; down\up 只会执行一次
特征 堆是完全二叉树(除最后一层其他层满，最后一层从左往右排列)
建立堆 正常方式 逐个插入建堆, 时间复杂度O(n*log n)
快速方式 读入 从 n/2 -&amp;gt; 1 处 开始执行down操作, 时间复杂度 O(n) 证明: 递推</description>
    </item>
    
    <item>
      <title>Trie</title>
      <link>https://psuvtk.github.io/algo/trie/</link>
      <pubDate>Sat, 15 Apr 2023 22:15:47 +0800</pubDate>
      
      <guid>https://psuvtk.github.io/algo/trie/</guid>
      <description>字典树？
acwing 算法基础课
#include &amp;lt;iostream&amp;gt;#include &amp;lt;stdio.h&amp;gt;using namespace std; const int N = 100010; // 子节点编号(索引) int son[N][26]; int cnt[N]; // 当前使用节点的索引 // 索引为0的点既是根节点 也是空节点 int idx; int insert(const char* s) { int p = 0; for (int i = 0; s[i]; i++) { int u = s[i] - &amp;#39;a&amp;#39;; if (!son[p][u]) son[p][u] = ++idx; p = son[p][u]; } cnt[p] ++; } int query(const char *s) { int p = 0; for (int i = 0; s[i]; i++) { int u = s[i] - &amp;#39;a&amp;#39;; if (!</description>
    </item>
    
    <item>
      <title>并查集</title>
      <link>https://psuvtk.github.io/algo/%E5%B9%B6%E6%9F%A5%E9%9B%86/</link>
      <pubDate>Sat, 15 Apr 2023 22:15:47 +0800</pubDate>
      
      <guid>https://psuvtk.github.io/algo/%E5%B9%B6%E6%9F%A5%E9%9B%86/</guid>
      <description>主要操作  合并两个集合 查询 两个元素是否在同一个集合  并查集优化(路径压缩) WHY: 防止查询父节点时间过长
HOW: 让路径的店直接指向根节点
代码实现:
# tips: find的同时实现路径压缩  int find(int x) { // 压缩路径  if (p[x] != x) p[x] = find(p[x]); // 此时父节点就是新的父节点  return p[x]; } 按秩优化(无用) 让矮的树接到高的树
基本模板题 合并集合 连通块中点的数量  练习题 食物链
WHY: 为什么 find的时候 需要 d[x] = d[p[x]] ANS: 因为dx 是与父节点之间的距离，合并两棵树时，dx 并一定为 1, 因此后续压缩路径的时候dx并不一定为1</description>
    </item>
    
    <item>
      <title>并查集</title>
      <link>https://psuvtk.github.io/algo/%E6%8E%92%E5%BA%8F/</link>
      <pubDate>Sat, 15 Apr 2023 22:15:47 +0800</pubDate>
      
      <guid>https://psuvtk.github.io/algo/%E6%8E%92%E5%BA%8F/</guid>
      <description>acwing 基础课 第一章 基础算法(一) 快排 void quick_sort(int *q, int l, int r) { // 边界处理, 记住其中一种即可  // 取端点可能会退化为O(n)  // 左端点要用 (l,j), (j+1,r)  // int x = q[l];  // 右端点要用 (l,i-1), (i,r)  // int x = q[r];  // int x = q[(l+r+1) &amp;gt;&amp;gt; 1];  int x = q[rand() % (r - l + 1) + l]; // off-the-end, 后面直接先增加  int i = l - 1; int j = r + 1; if (l &amp;gt;= r) return; while (i &amp;lt; j) { do i++; while (q[i] &amp;lt; x); do j--; while (q[j] &amp;gt; x); if (i &amp;lt; j) swap(q[i], q[j]); } quick_sort(q, l, j); quick_sort(q, j+1, r); } </description>
    </item>
    
    <item>
      <title>算法STL</title>
      <link>https://psuvtk.github.io/algo/stl/</link>
      <pubDate>Sat, 15 Apr 2023 22:15:47 +0800</pubDate>
      
      <guid>https://psuvtk.github.io/algo/stl/</guid>
      <description>不管读字符还是读字符串都用%s来读取
// 读取 I abc char op[2]; scanf(&amp;#34;%s%s&amp;#34;, op, str); vector 支持[] size() empty() clear() 清空 front()/back() 数组头尾元素 push_back()/pop_back begin()/end() 首尾元素 支持字典序比较 pair first 第一个元素 second 第二个元素 string size()/length 返回长度 empty() clear() substr(a,b) 得到一个下标位a长度位b的子字符串 substr(a) 得到一个下表为a长度取最长的子字符串 c_str() 取string定义数组的首地址 queue size() empty() push() 在队尾插入一个元素 front()/back() 返回队头/队尾元素 pop() 弹出队头元素 priority_queue 优先队列(堆) 默认大根堆 size() empty() push() top() pop() 定义小根堆: priority_queue&amp;lt;int , vector&amp;lt;int&amp;gt; , greater&amp;lt;int&amp;gt;&amp;gt; stack size() empty() push() pop() top() deque 支持[] size() empty() clear() front()/back() 头尾元素 push_back()/push_front() 在头尾插入 begin()/end() set , map , multimap , multiset , 基于平衡二叉树 (红黑树) 维护一个有序数列 大部分函数时间复杂度都是logn (因为是树) size() empty() clear() begin()/end() 支持++ -- 时间复杂度 O(logn) lower_bound()/upper_bound() lower_bound(x) 返回一个大于等于x的最小值 upper_bound(x) 返回一个大于x的最小值 set / multiset set不支持重复数插入 插入重复数直接跳过 insert() 插入一个数 find() 查找一个数 count() 返回一个数存入的个数 erase() (1) 输入是一个x , 删除全部x , 时间复杂度 O(k + logn) (2) 输入是一个迭代器 , 删除这个迭代器 map / multimap insert() 插入的是一个pair erase() 输入的参数是pair 或者 迭代器 find() 支持[] unordered_set , unordered_map , unordered_multiset , unordered_multimap 基本跟上面一个一样 查找删改时间复杂度是 O(1) 不支持lower_bound()/upper_bound() 迭代器的++ -- bitset 压位 bitset&amp;lt;放大小&amp;gt; s; 初始化时候全为0 —— false; ~取反 &amp;amp;且 |或 ^异或 == , !</description>
    </item>
    
    <item>
      <title>Linux调度</title>
      <link>https://psuvtk.github.io/posts/23.-linux_%E8%B0%83%E5%BA%A6/</link>
      <pubDate>Tue, 11 Apr 2023 00:02:47 +0800</pubDate>
      
      <guid>https://psuvtk.github.io/posts/23.-linux_%E8%B0%83%E5%BA%A6/</guid>
      <description>stop_task.c	117 DEFINE_SCHED_CLASS(stop) idle.c	498 DEFINE_SCHED_CLASS(idle) deadline.c	2696 DEFINE_SCHED_CLASS(dl) rt.c	2680 DEFINE_SCHED_CLASS(rt) fair.c	12355 DEFINE_SCHED_CLASS(fair) 调度器会放到单独的段里面
#define DEFINE_SCHED_CLASS(name) \ const struct sched_class name##_sched_class \ __aligned(__alignof__(struct sched_class)) \ __section(&amp;#34;__&amp;#34; #name &amp;#34;_sched_class&amp;#34;) </description>
    </item>
    
    <item>
      <title>实现std::function</title>
      <link>https://psuvtk.github.io/posts/24.-%E5%AE%9E%E7%8E%B0std_function/</link>
      <pubDate>Tue, 11 Apr 2023 00:02:47 +0800</pubDate>
      
      <guid>https://psuvtk.github.io/posts/24.-%E5%AE%9E%E7%8E%B0std_function/</guid>
      <description>#include &amp;lt;iostream&amp;gt;#include &amp;lt;functional&amp;gt; int myprint() { std::cout &amp;lt;&amp;lt; __func__ &amp;lt;&amp;lt; std::endl; return 1; } namespace Mico { template&amp;lt;typename RetType, typename... Args&amp;gt; class Functional {}; template&amp;lt;typename RetType, typename... Args&amp;gt; class Functional&amp;lt;RetType(Args...)&amp;gt; { using FuncPtrType = RetType (*)(Args...); public: Functional(FuncPtrType func) : _func(func) { } RetType operator()(Args... args) { std::cout &amp;lt;&amp;lt; __func__ &amp;lt;&amp;lt; std::endl; return _func(args...); } private: FuncPtrType _func; }; } int main () { Mico::Functional&amp;lt;int()&amp;gt; fp{myprint}; fp(); } 上面的代码没有做到类型擦除？实际上只是相当于函数指针？
template&amp;lt;typename RetType, typename.</description>
    </item>
    
    <item>
      <title>consle/tty/ptmx/pts</title>
      <link>https://psuvtk.github.io/posts/22.-console/</link>
      <pubDate>Sun, 26 Feb 2023 20:48:47 +0800</pubDate>
      
      <guid>https://psuvtk.github.io/posts/22.-console/</guid>
      <description>console :=
termial :=
tty
ptmx、pts</description>
    </item>
    
    <item>
      <title>内核编译</title>
      <link>https://psuvtk.github.io/posts/21.-linux%E5%86%85%E6%A0%B8%E7%BC%96%E8%AF%91/</link>
      <pubDate>Sun, 26 Feb 2023 20:48:47 +0800</pubDate>
      
      <guid>https://psuvtk.github.io/posts/21.-linux%E5%86%85%E6%A0%B8%E7%BC%96%E8%AF%91/</guid>
      <description> 下载Ubuntu镜像 安装Virtual Box 下载内核源码, linux-source 这个包可能和当前的内核版本不匹配？, 所以使用linux-source-5.xx.x包  sudo apt-get install linux-headers-$(uname -r) sudo apt-get install linux-source-5.xx.x cd /usr/src/linux-source-5.19.0 sudo tar jxf /usr/src/linux-source-5.19.0.tar.bz2 依赖安装 sudo apt install build-essential libncurses5-dev libssl-dev flex bison 编译内核 #清除之前编译环境 make mrproper # 编译 sudo make defconfig sudo make -j4  安装基本软件
sudo apt install zsh git curl vim</description>
    </item>
    
    <item>
      <title>MCU开发踩坑</title>
      <link>https://psuvtk.github.io/posts/19.-mcu-%E5%BC%80%E5%8F%91%E8%B8%A9%E5%9D%91/</link>
      <pubDate>Thu, 09 Feb 2023 23:36:47 +0800</pubDate>
      
      <guid>https://psuvtk.github.io/posts/19.-mcu-%E5%BC%80%E5%8F%91%E8%B8%A9%E5%9D%91/</guid>
      <description>串口输出乱码 时钟配置不正确
Cortex-M0 与 Cortex-M23 Cortex-M3 与 Cortex-M33 </description>
    </item>
    
    <item>
      <title>锁</title>
      <link>https://psuvtk.github.io/posts/20.-locking/</link>
      <pubDate>Thu, 09 Feb 2023 23:36:47 +0800</pubDate>
      
      <guid>https://psuvtk.github.io/posts/20.-locking/</guid>
      <description>如何死锁?  ABBA 同线程多次调用不可重入锁  可重入与不可重入 用户态与内核态 库函数与锁 死锁 形成死锁的必要条件  互斥条件 不可剥夺条件 请求与保持条件 循环等待条件  如何避免死锁 破坏上述的必要条件
 互斥条件 :: 无法破坏, 锁的目的就是互斥 不可剥夺条件 :: 无法获取锁时, 直接失败或者等待超时 请求与保持条件 :: 在加锁前，增加资源池判断资源是否已经在池内 循环等待条件 :: 保证加锁的顺序  参考  深入理解高并发原理  </description>
    </item>
    
    <item>
      <title>RTOS与LINUX差异</title>
      <link>https://psuvtk.github.io/posts/18.-rtos%E4%B8%8Elinux/</link>
      <pubDate>Sun, 05 Feb 2023 23:46:47 +0800</pubDate>
      
      <guid>https://psuvtk.github.io/posts/18.-rtos%E4%B8%8Elinux/</guid>
      <description>占用资源少
实时性方面？
实时性的定义 在有限截止时间内任务得到调度</description>
    </item>
    
    <item>
      <title>TF-M</title>
      <link>https://psuvtk.github.io/posts/17.-tf-m/</link>
      <pubDate>Fri, 09 Dec 2022 23:51:47 +0800</pubDate>
      
      <guid>https://psuvtk.github.io/posts/17.-tf-m/</guid>
      <description>ARM 官方文档: https://tf-m-user-guide.trustedfirmware.org/introduction/readme.html
Armv8-M and Armv8.1-M architectures. cortex-m23 cortex-m33 cortex-m55 cortex-m85 或者其他物理核隔离的系统, 比如Cypress PSoC® 64 Secure Microcontrollers;
PSA Certified guidelines SPE &amp;lt;&amp;ndash;&amp;gt; NSPE
mcuboot https://docs.mcuboot.com/design.html 阅读TF-M的官方文档是发现BL2使用是mcuboot这个项目。 mcuboot被设计为一个函数库，官方文档给出的其中一个原因是函数库可以进行单元测试，但是完整的应用不能够(A library can be unit tested, but an application can’t.)。因此，mcuboot并不包含实际跳转到APP执行的代码。</description>
    </item>
    
    <item>
      <title>啤酒!</title>
      <link>https://psuvtk.github.io/life/51.-%E5%95%A4%E9%85%92/</link>
      <pubDate>Fri, 09 Dec 2022 23:51:47 +0800</pubDate>
      
      <guid>https://psuvtk.github.io/life/51.-%E5%95%A4%E9%85%92/</guid>
      <description>哪里买 品牌 价格 酒精度 麦芽度 评价     盒马 盒马 德式小麦白 精酿原浆 15.9元 / 1000ml 4.5%vol 12.1P 泡沫绵密消散慢浑浊好喝   盒马 盒马 黄油风味皮尔森啤酒 19.9元 / 650ml 2.5%vol 8P 好喝   随便 青岛白啤 元 / ml 4.1%vol 11P 好喝   随便 雪花 醇香啤酒(易拉罐) 4.88元 / 500ml 4.7%vol 12P 泡沫丰富消散适中, 酒体澄澈, 不错   盒马 盒马 印度淡色艾尔 精酿原浆 23.9元 / 1000ml 6.1%vol 14.2P 泡沫绵密消散慢, 略苦, 劲蛮大   盒马 盒马精酿原浆 桂圆红枣小麦啤酒(冬限定) 18.</description>
    </item>
    
    <item>
      <title>理解LINUX系统调用</title>
      <link>https://psuvtk.github.io/posts/16.-linux%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/</link>
      <pubDate>Sat, 03 Dec 2022 01:01:47 +0800</pubDate>
      
      <guid>https://psuvtk.github.io/posts/16.-linux%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/</guid>
      <description>上下文 内核在执行系统调用的时候处于进程上下文
 可以睡眠 可以被抢占 &amp;mdash;&amp;gt; 需要保证系统是可以重入的  用户态抢占 从中断返回用户空间时 从系统调用返回用户空间时
内核态抢占 时机: 未持有锁</description>
    </item>
    
    <item>
      <title>同步原语</title>
      <link>https://psuvtk.github.io/posts/15.-%E5%86%85%E6%A0%B8%E5%90%8C%E6%AD%A5%E5%8E%9F%E8%AF%AD/</link>
      <pubDate>Tue, 29 Nov 2022 01:01:47 +0800</pubDate>
      
      <guid>https://psuvtk.github.io/posts/15.-%E5%86%85%E6%A0%B8%E5%90%8C%E6%AD%A5%E5%8E%9F%E8%AF%AD/</guid>
      <description>与中断例程之间的同步：禁止中断
UP 不需要同步 SMP 才需要
内核锁 用户态锁 参考  kernel_locking  </description>
    </item>
    
    <item>
      <title>Lua</title>
      <link>https://psuvtk.github.io/posts/12.-lua/</link>
      <pubDate>Sun, 20 Nov 2022 20:18:47 +0800</pubDate>
      
      <guid>https://psuvtk.github.io/posts/12.-lua/</guid>
      <description>Lua 缩写 luaX == Lua lex LuaZ == LuaS ==</description>
    </item>
    
    <item>
      <title>I2C总线</title>
      <link>https://psuvtk.github.io/posts/11.-i2c%E6%80%BB%E7%BA%BF/</link>
      <pubDate>Wed, 19 Oct 2022 20:18:47 +0800</pubDate>
      
      <guid>https://psuvtk.github.io/posts/11.-i2c%E6%80%BB%E7%BA%BF/</guid>
      <description>时钟延展 总线挂死 I2C子系统 Linux内核实现 TODO
软件模拟I2C Master(GPIO模拟) 检测总线是否空闲 发送START // 确保总线空闲 // HOW TO us_delay(4); // 额外的  SDA=1;SCL=1; // 是否需要延时？延时多少  // START 符号 SDA=0;SCL=1; // T_hd;sta &amp;gt; 4.0 us us_delay(4); SDA=0;SCL=0; 发送 // T_low &amp;gt; 4.7, T_high &amp;gt; 4.0us SCL = 0; us_delay(5); // 数据 SDA = xx; // T_su;dat &amp;gt; 250ns us_delay(1); // 拉高SCL SCL = 1; // T_high &amp;gt; 4.0us us_delay(4); // 拉低SCL SCL = 0; // T_high &amp;gt; 4.</description>
    </item>
    
    <item>
      <title>SPI总线</title>
      <link>https://psuvtk.github.io/posts/10.-%E6%80%BB%E7%BA%BF%E5%8D%8F%E8%AE%AE/</link>
      <pubDate>Wed, 19 Oct 2022 20:18:47 +0800</pubDate>
      
      <guid>https://psuvtk.github.io/posts/10.-%E6%80%BB%E7%BA%BF%E5%8D%8F%E8%AE%AE/</guid>
      <description>SPI 同步通信协议 如何实现一主多从？ 通过多个片选，每个片选对应一个从机
MOSI MISO
I2C 同步通信协议
如何实现一主多从？ 通过使用多个从机地址
开漏结构 &amp;lt;-&amp;gt; 数据双向传输
SCL SDA
典型速率: 100Kbps, 400Kbpx, 3.4Mbps
UART 异步通信协议 慢 115200</description>
    </item>
    
    <item>
      <title>小吊梨汤</title>
      <link>https://psuvtk.github.io/life/50.-%E5%B0%8F%E5%90%8A%E6%A2%A8%E6%B1%A4/</link>
      <pubDate>Wed, 12 Oct 2022 20:18:47 +0800</pubDate>
      
      <guid>https://psuvtk.github.io/life/50.-%E5%B0%8F%E5%90%8A%E6%A2%A8%E6%B1%A4/</guid>
      <description>原料  秋梨 银耳 百合 橘皮 葛根 话梅 枸杞 黄冰糖  </description>
    </item>
    
    <item>
      <title>MTD子系统与JFFS2文件系统</title>
      <link>https://psuvtk.github.io/posts/7.spi_nor/</link>
      <pubDate>Thu, 06 Oct 2022 20:18:47 +0800</pubDate>
      
      <guid>https://psuvtk.github.io/posts/7.spi_nor/</guid>
      <description>遗留问题: 从spi-nor目录的Makefile可以看出目录下文件的关系, 可以看出spi-nor子系统主要由核心、控制器以及FLASH厂商组成；
# SPDX-License-Identifier: GPL-2.0 spi-nor-objs	:= core.o sfdp.o swp.o otp.o sysfs.o spi-nor-objs	+= atmel.o spi-nor-objs	+= catalyst.o spi-nor-objs	+= eon.o spi-nor-objs	+= esmt.o spi-nor-objs	+= everspin.o spi-nor-objs	+= fujitsu.o spi-nor-objs	+= gigadevice.o spi-nor-objs	+= intel.o spi-nor-objs	+= issi.o spi-nor-objs	+= macronix.o spi-nor-objs	+= micron-st.o spi-nor-objs	+= spansion.o spi-nor-objs	+= sst.o spi-nor-objs	+= winbond.o spi-nor-objs	+= xilinx.o spi-nor-objs	+= xmc.o obj-$(CONFIG_MTD_SPI_NOR)	+= spi-nor.o obj-$(CONFIG_MTD_SPI_NOR)	+= controllers/ &amp;ndash; drivers\mtd\spi-nor\controllers\intel-spi.c https://lwn.net/Articles/692383/</description>
    </item>
    
    <item>
      <title>{OpenGrok引擎浏览开源代码</title>
      <link>https://psuvtk.github.io/posts/1.-opengrok/</link>
      <pubDate>Mon, 12 Sep 2022 13:56:47 +0800</pubDate>
      
      <guid>https://psuvtk.github.io/posts/1.-opengrok/</guid>
      <description>[TOC]
阅读大型源码项目除传统的Souce Insight、Scitools Understand等付费PC端工具，基于Web的{OpenGrok 和Elixir Cross Reference也是相当惊艳，方便躺在床上用ipad阅读源代码。作为开源工具，不仅免费而且支持用户自己搭建。如下为{OpenGrok的界面:
另外，二者都提供许多常见的大型项目(https://github.com/oracle/opengrok/wiki/Installations 以及https://elixir.bootlin.com/)，足够使用并且免除动手搭建的麻烦。但毕竟是国外网站，偶尔访问速度上不去，故自己动手搭建一套还是非常有用的。OpenGrok的源码方式安装还是蛮麻烦的，所以使用官方的Docker镜像并且自己写了个小脚本方便进行管理。
1. Debian/Ubuntu系统搭建{OpenGrok 博主使用的是Debian系统，所以包管理器为apt，如果你使用其它系统或者想要改变端口或者源码目录，简单修改脚本即可。 (1). 安装 Docker / Opengrok
./opengrok.sh install 该命令做了如下工作: 删除已存在的Docker、启用https、加入docker的官方gpg密钥、校验密钥、添加稳定源、安装Docker社区版、安装opengrok/docker image、创建opengrok目录。
sudo apt remove docker docker-engine docker.io containerd runc curl -fsSL https://download.docker.com/linux/debian/gpg | sudo apt-key add - sudo apt-key fingerprint 0EBFCD88 sudo add-apt-repository \ 	&amp;#34;deb [arch=amd64] https://download.docker.com/linux/debian \ $(lsb_release -cs)\ stable&amp;#34; sudo apt update sudo apt-get install -y docker-ce docker-ce-cli containerd.io sudo docker pull opengrok/docker sudo mkdir -p $GROKPATH/etc sudo mkdir -p $GROKPATH/data sudo mkdir -p $GROKPATH/src (2).</description>
    </item>
    
    <item>
      <title>习惯迁移</title>
      <link>https://psuvtk.github.io/posts/3.-coder_tools/</link>
      <pubDate>Mon, 18 Jul 2022 23:38:47 +0800</pubDate>
      
      <guid>https://psuvtk.github.io/posts/3.-coder_tools/</guid>
      <description>VSCode :: 编辑器即IDE
Tabby :: 终端工具
MobaXTerm :: 远程工具
oh-my-zsh ::
opengrok :: 代码浏览器,用于阅读源码
BandZip :: 压缩
Beyond Compare :: 比较工具
cloc :: 统计代码行数</description>
    </item>
    
    <item>
      <title></title>
      <link>https://psuvtk.github.io/algo/%E6%95%B4%E6%95%B0_%E6%B5%AE%E7%82%B9%E6%95%B0_%E4%BA%8C%E5%88%86/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://psuvtk.github.io/algo/%E6%95%B4%E6%95%B0_%E6%B5%AE%E7%82%B9%E6%95%B0_%E4%BA%8C%E5%88%86/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://psuvtk.github.io/posts/13.-libco%E5%AE%9A%E6%97%B6%E5%99%A8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://psuvtk.github.io/posts/13.-libco%E5%AE%9A%E6%97%B6%E5%99%A8/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://psuvtk.github.io/posts/14.-go%E8%AF%AD%E8%A8%80gmp%E6%A8%A1%E5%9E%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://psuvtk.github.io/posts/14.-go%E8%AF%AD%E8%A8%80gmp%E6%A8%A1%E5%9E%8B/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
