<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 技术的细节</title>
    <link>https://psuvtk.github.io/posts/</link>
    <description>Recent content in Posts on 技术的细节</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 14 Aug 2022 22:25:47 +0800</lastBuildDate><atom:link href="https://psuvtk.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>coredump文件的生成及文件格式</title>
      <link>https://psuvtk.github.io/posts/5.-linux_coredump%E7%9A%84%E7%94%9F%E6%88%90%E5%8F%8A%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F/</link>
      <pubDate>Sun, 14 Aug 2022 22:25:47 +0800</pubDate>
      
      <guid>https://psuvtk.github.io/posts/5.-linux_coredump%E7%9A%84%E7%94%9F%E6%88%90%E5%8F%8A%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F/</guid>
      <description>内核版本: linux-5.16.16
从代码入手分析coredump文件格式 </description>
    </item>
    
    <item>
      <title>Coder_tools</title>
      <link>https://psuvtk.github.io/posts/4.-%E5%90%8C%E6%AD%A5%E5%8E%9F%E8%AF%AD/</link>
      <pubDate>Mon, 18 Jul 2022 23:38:47 +0800</pubDate>
      
      <guid>https://psuvtk.github.io/posts/4.-%E5%90%8C%E6%AD%A5%E5%8E%9F%E8%AF%AD/</guid>
      <description>VSCode :: 编辑器即IDE
Tabby :: 终端工具
MobaXTerm :: 远程工具</description>
    </item>
    
    <item>
      <title>Trace32 调试技巧</title>
      <link>https://psuvtk.github.io/posts/2.-trace_32/</link>
      <pubDate>Sun, 10 Apr 2022 23:17:43 +0800</pubDate>
      
      <guid>https://psuvtk.github.io/posts/2.-trace_32/</guid>
      <description>Trace32 官方文档
脚本语言 Practise 通过修改当前指令实现SMC调用   右键 Assembly Here.
  利用 psci reset 发起复位请求
  ldr r0, =0x84000009 smc #0 进入OS后无法设置寄存器 Answer: MMU设置后, 不能再通过原来的命令进行实地址访问, 需要增加EA前缀;
Data.Set EA:&amp;amp;addr 0x1234 </description>
    </item>
    
    <item>
      <title>Linux IO 函数</title>
      <link>https://psuvtk.github.io/posts/1.-linux_io_macro/</link>
      <pubDate>Tue, 05 Apr 2022 19:20:45 +0800</pubDate>
      
      <guid>https://psuvtk.github.io/posts/1.-linux_io_macro/</guid>
      <description>arch\arm64\include\asm\io.h
/* * Relaxed I/O memory access primitives. These follow the Device memory * ordering rules but do not guarantee any ordering relative to Normal memory * accesses. */ #define readb_relaxed(c)	({ u8 __r = __raw_readb(c); __r; }) #define readw_relaxed(c)	({ u16 __r = le16_to_cpu((__force __le16)__raw_readw(c)); __r; }) #define readl_relaxed(c)	({ u32 __r = le32_to_cpu((__force __le32)__raw_readl(c)); __r; }) #define readq_relaxed(c)	({ u64 __r = le64_to_cpu((__force __le64)__raw_readq(c)); __r; })  #define writeb_relaxed(v,c)	((void)__raw_writeb((v),(c))) #define writew_relaxed(v,c)	((void)__raw_writew((__force u16)cpu_to_le16(v),(c))) #define writel_relaxed(v,c)	((void)__raw_writel((__force u32)cpu_to_le32(v),(c))) #define writeq_relaxed(v,c)	((void)__raw_writeq((__force u64)cpu_to_le64(v),(c)))  /* * I/O memory access primitives.</description>
    </item>
    
  </channel>
</rss>
