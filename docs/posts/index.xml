<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Early is on Time</title>
    <link>https://psuvtk.github.io/posts/</link>
    <description>Recent content in Posts on Early is on Time</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 11 Apr 2023 00:02:47 +0800</lastBuildDate><atom:link href="https://psuvtk.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Linux调度</title>
      <link>https://psuvtk.github.io/posts/23.-linux_%E8%B0%83%E5%BA%A6/</link>
      <pubDate>Tue, 11 Apr 2023 00:02:47 +0800</pubDate>
      
      <guid>https://psuvtk.github.io/posts/23.-linux_%E8%B0%83%E5%BA%A6/</guid>
      <description>stop_task.c	117 DEFINE_SCHED_CLASS(stop) idle.c	498 DEFINE_SCHED_CLASS(idle) deadline.c	2696 DEFINE_SCHED_CLASS(dl) rt.c	2680 DEFINE_SCHED_CLASS(rt) fair.c	12355 DEFINE_SCHED_CLASS(fair) 调度器会放到单独的段里面
#define DEFINE_SCHED_CLASS(name) \ const struct sched_class name##_sched_class \ __aligned(__alignof__(struct sched_class)) \ __section(&amp;#34;__&amp;#34; #name &amp;#34;_sched_class&amp;#34;) </description>
    </item>
    
    <item>
      <title>实现std::function</title>
      <link>https://psuvtk.github.io/posts/24.-%E5%AE%9E%E7%8E%B0std_function/</link>
      <pubDate>Tue, 11 Apr 2023 00:02:47 +0800</pubDate>
      
      <guid>https://psuvtk.github.io/posts/24.-%E5%AE%9E%E7%8E%B0std_function/</guid>
      <description>#include &amp;lt;iostream&amp;gt;#include &amp;lt;functional&amp;gt; int myprint() { std::cout &amp;lt;&amp;lt; __func__ &amp;lt;&amp;lt; std::endl; return 1; } namespace Mico { template&amp;lt;typename RetType, typename... Args&amp;gt; class Functional {}; template&amp;lt;typename RetType, typename... Args&amp;gt; class Functional&amp;lt;RetType(Args...)&amp;gt; { using FuncPtrType = RetType (*)(Args...); public: Functional(FuncPtrType func) : _func(func) { } RetType operator()(Args... args) { std::cout &amp;lt;&amp;lt; __func__ &amp;lt;&amp;lt; std::endl; return _func(args...); } private: FuncPtrType _func; }; } int main () { Mico::Functional&amp;lt;int()&amp;gt; fp{myprint}; fp(); } 上面的代码没有做到类型擦除？实际上只是相当于函数指针？
template&amp;lt;typename RetType, typename.</description>
    </item>
    
    <item>
      <title>consle/tty/ptmx/pts</title>
      <link>https://psuvtk.github.io/posts/22.-console/</link>
      <pubDate>Sun, 26 Feb 2023 20:48:47 +0800</pubDate>
      
      <guid>https://psuvtk.github.io/posts/22.-console/</guid>
      <description>console :=
termial :=
tty
ptmx、pts</description>
    </item>
    
    <item>
      <title>内核编译</title>
      <link>https://psuvtk.github.io/posts/21.-linux%E5%86%85%E6%A0%B8%E7%BC%96%E8%AF%91/</link>
      <pubDate>Sun, 26 Feb 2023 20:48:47 +0800</pubDate>
      
      <guid>https://psuvtk.github.io/posts/21.-linux%E5%86%85%E6%A0%B8%E7%BC%96%E8%AF%91/</guid>
      <description> 下载Ubuntu镜像 安装Virtual Box 下载内核源码, linux-source 这个包可能和当前的内核版本不匹配？, 所以使用linux-source-5.xx.x包  sudo apt-get install linux-headers-$(uname -r) sudo apt-get install linux-source-5.xx.x cd /usr/src/linux-source-5.19.0 sudo tar jxf /usr/src/linux-source-5.19.0.tar.bz2 依赖安装 sudo apt install build-essential libncurses5-dev libssl-dev flex bison 编译内核 #清除之前编译环境 make mrproper # 编译 sudo make defconfig sudo make -j4  安装基本软件
sudo apt install zsh git curl vim</description>
    </item>
    
    <item>
      <title>MCU开发踩坑</title>
      <link>https://psuvtk.github.io/posts/19.-mcu-%E5%BC%80%E5%8F%91%E8%B8%A9%E5%9D%91/</link>
      <pubDate>Thu, 09 Feb 2023 23:36:47 +0800</pubDate>
      
      <guid>https://psuvtk.github.io/posts/19.-mcu-%E5%BC%80%E5%8F%91%E8%B8%A9%E5%9D%91/</guid>
      <description>串口输出乱码 时钟配置不正确</description>
    </item>
    
    <item>
      <title>锁</title>
      <link>https://psuvtk.github.io/posts/20.-locking/</link>
      <pubDate>Thu, 09 Feb 2023 23:36:47 +0800</pubDate>
      
      <guid>https://psuvtk.github.io/posts/20.-locking/</guid>
      <description>如何死锁?  ABBA 同线程多次调用不可重入锁  可重入与不可重入 用户态与内核态 库函数与锁 死锁 形成死锁的必要条件  互斥条件 不可剥夺条件 请求与保持条件 循环等待条件  如何避免死锁 破坏上述的必要条件
 互斥条件 :: 无法破坏, 锁的目的就是互斥 不可剥夺条件 :: 无法获取锁时, 直接失败或者等待超时 请求与保持条件 :: 在加锁前，增加资源池判断资源是否已经在池内 循环等待条件 :: 保证加锁的顺序  参考  深入理解高并发原理  </description>
    </item>
    
    <item>
      <title>RTOS与LINUX差异</title>
      <link>https://psuvtk.github.io/posts/18.-rtos%E4%B8%8Elinux/</link>
      <pubDate>Sun, 05 Feb 2023 23:46:47 +0800</pubDate>
      
      <guid>https://psuvtk.github.io/posts/18.-rtos%E4%B8%8Elinux/</guid>
      <description>占用资源少
实时性方面？
实时性的定义 在有限截止时间内任务得到调度</description>
    </item>
    
    <item>
      <title>TF-M</title>
      <link>https://psuvtk.github.io/posts/17.-tf-m/</link>
      <pubDate>Fri, 09 Dec 2022 23:51:47 +0800</pubDate>
      
      <guid>https://psuvtk.github.io/posts/17.-tf-m/</guid>
      <description>ARM 官方文档: https://tf-m-user-guide.trustedfirmware.org/introduction/readme.html
Armv8-M and Armv8.1-M architectures. cortex-m23 cortex-m33 cortex-m55 cortex-m85 或者其他物理核隔离的系统, 比如Cypress PSoC® 64 Secure Microcontrollers;
PSA Certified guidelines SPE &amp;lt;&amp;ndash;&amp;gt; NSPE
mcuboot https://docs.mcuboot.com/design.html 阅读TF-M的官方文档是发现BL2使用是mcuboot这个项目。 mcuboot被设计为一个函数库，官方文档给出的其中一个原因是函数库可以进行单元测试，但是完整的应用不能够(A library can be unit tested, but an application can’t.)。因此，mcuboot并不包含实际跳转到APP执行的代码。</description>
    </item>
    
    <item>
      <title>理解LINUX系统调用</title>
      <link>https://psuvtk.github.io/posts/16.-linux%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/</link>
      <pubDate>Sat, 03 Dec 2022 01:01:47 +0800</pubDate>
      
      <guid>https://psuvtk.github.io/posts/16.-linux%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/</guid>
      <description>上下文 内核在执行系统调用的时候处于进程上下文
 可以睡眠 可以被抢占 &amp;mdash;&amp;gt; 需要保证系统是可以重入的  用户态抢占 从中断返回用户空间时 从系统调用返回用户空间时
内核态抢占 时机: 未持有锁</description>
    </item>
    
    <item>
      <title>同步原语</title>
      <link>https://psuvtk.github.io/posts/15.-%E5%86%85%E6%A0%B8%E5%90%8C%E6%AD%A5%E5%8E%9F%E8%AF%AD/</link>
      <pubDate>Tue, 29 Nov 2022 01:01:47 +0800</pubDate>
      
      <guid>https://psuvtk.github.io/posts/15.-%E5%86%85%E6%A0%B8%E5%90%8C%E6%AD%A5%E5%8E%9F%E8%AF%AD/</guid>
      <description>与中断例程之间的同步：禁止中断
UP 不需要同步 SMP 才需要
内核锁 用户态锁 参考  kernel_locking  </description>
    </item>
    
    <item>
      <title>Lua</title>
      <link>https://psuvtk.github.io/posts/12.-lua/</link>
      <pubDate>Sun, 20 Nov 2022 20:18:47 +0800</pubDate>
      
      <guid>https://psuvtk.github.io/posts/12.-lua/</guid>
      <description>Lua 缩写 luaX == Lua lex LuaZ == LuaS ==</description>
    </item>
    
    <item>
      <title>I2C总线</title>
      <link>https://psuvtk.github.io/posts/11.-i2c%E6%80%BB%E7%BA%BF/</link>
      <pubDate>Wed, 19 Oct 2022 20:18:47 +0800</pubDate>
      
      <guid>https://psuvtk.github.io/posts/11.-i2c%E6%80%BB%E7%BA%BF/</guid>
      <description>时钟延展 总线挂死 I2C子系统 Linux内核实现 TODO
软件模拟I2C Master(GPIO模拟) 检测总线是否空闲 发送START // 确保总线空闲 // HOW TO us_delay(4); // 额外的  SDA=1;SCL=1; // 是否需要延时？延时多少  // START 符号 SDA=0;SCL=1; // T_hd;sta &amp;gt; 4.0 us us_delay(4); SDA=0;SCL=0; 发送 // T_low &amp;gt; 4.7, T_high &amp;gt; 4.0us SCL = 0; us_delay(5); // 数据 SDA = xx; // T_su;dat &amp;gt; 250ns us_delay(1); // 拉高SCL SCL = 1; // T_high &amp;gt; 4.0us us_delay(4); // 拉低SCL SCL = 0; // T_high &amp;gt; 4.</description>
    </item>
    
    <item>
      <title>SPI总线</title>
      <link>https://psuvtk.github.io/posts/10.-%E6%80%BB%E7%BA%BF%E5%8D%8F%E8%AE%AE/</link>
      <pubDate>Wed, 19 Oct 2022 20:18:47 +0800</pubDate>
      
      <guid>https://psuvtk.github.io/posts/10.-%E6%80%BB%E7%BA%BF%E5%8D%8F%E8%AE%AE/</guid>
      <description>SPI 同步通信协议 如何实现一主多从？ 通过多个片选，每个片选对应一个从机
MOSI MISO
I2C 同步通信协议
如何实现一主多从？ 通过使用多个从机地址
开漏结构 &amp;lt;-&amp;gt; 数据双向传输
SCL SDA
典型速率: 100Kbps, 400Kbpx, 3.4Mbps
UART 异步通信协议 慢 115200</description>
    </item>
    
    <item>
      <title>MTD子系统与JFFS2文件系统</title>
      <link>https://psuvtk.github.io/posts/7.spi_nor/</link>
      <pubDate>Thu, 06 Oct 2022 20:18:47 +0800</pubDate>
      
      <guid>https://psuvtk.github.io/posts/7.spi_nor/</guid>
      <description>遗留问题: 从spi-nor目录的Makefile可以看出目录下文件的关系, 可以看出spi-nor子系统主要由核心、控制器以及FLASH厂商组成；
# SPDX-License-Identifier: GPL-2.0 spi-nor-objs	:= core.o sfdp.o swp.o otp.o sysfs.o spi-nor-objs	+= atmel.o spi-nor-objs	+= catalyst.o spi-nor-objs	+= eon.o spi-nor-objs	+= esmt.o spi-nor-objs	+= everspin.o spi-nor-objs	+= fujitsu.o spi-nor-objs	+= gigadevice.o spi-nor-objs	+= intel.o spi-nor-objs	+= issi.o spi-nor-objs	+= macronix.o spi-nor-objs	+= micron-st.o spi-nor-objs	+= spansion.o spi-nor-objs	+= sst.o spi-nor-objs	+= winbond.o spi-nor-objs	+= xilinx.o spi-nor-objs	+= xmc.o obj-$(CONFIG_MTD_SPI_NOR)	+= spi-nor.o obj-$(CONFIG_MTD_SPI_NOR)	+= controllers/ &amp;ndash; drivers\mtd\spi-nor\controllers\intel-spi.c https://lwn.net/Articles/692383/</description>
    </item>
    
    <item>
      <title>{OpenGrok引擎浏览开源代码</title>
      <link>https://psuvtk.github.io/posts/1.-opengrok/</link>
      <pubDate>Mon, 12 Sep 2022 13:56:47 +0800</pubDate>
      
      <guid>https://psuvtk.github.io/posts/1.-opengrok/</guid>
      <description>[TOC]
阅读大型源码项目除传统的Souce Insight、Scitools Understand等付费PC端工具，基于Web的{OpenGrok 和Elixir Cross Reference也是相当惊艳，方便躺在床上用ipad阅读源代码。作为开源工具，不仅免费而且支持用户自己搭建。如下为{OpenGrok的界面:
另外，二者都提供许多常见的大型项目(https://github.com/oracle/opengrok/wiki/Installations 以及https://elixir.bootlin.com/)，足够使用并且免除动手搭建的麻烦。但毕竟是国外网站，偶尔访问速度上不去，故自己动手搭建一套还是非常有用的。OpenGrok的源码方式安装还是蛮麻烦的，所以使用官方的Docker镜像并且自己写了个小脚本方便进行管理。
1. Debian/Ubuntu系统搭建{OpenGrok 博主使用的是Debian系统，所以包管理器为apt，如果你使用其它系统或者想要改变端口或者源码目录，简单修改脚本即可。 (1). 安装 Docker / Opengrok
./opengrok.sh install 该命令做了如下工作: 删除已存在的Docker、启用https、加入docker的官方gpg密钥、校验密钥、添加稳定源、安装Docker社区版、安装opengrok/docker image、创建opengrok目录。
sudo apt remove docker docker-engine docker.io containerd runc curl -fsSL https://download.docker.com/linux/debian/gpg | sudo apt-key add - sudo apt-key fingerprint 0EBFCD88 sudo add-apt-repository \ 	&amp;#34;deb [arch=amd64] https://download.docker.com/linux/debian \ $(lsb_release -cs)\ stable&amp;#34; sudo apt update sudo apt-get install -y docker-ce docker-ce-cli containerd.io sudo docker pull opengrok/docker sudo mkdir -p $GROKPATH/etc sudo mkdir -p $GROKPATH/data sudo mkdir -p $GROKPATH/src (2).</description>
    </item>
    
    <item>
      <title>习惯迁移</title>
      <link>https://psuvtk.github.io/posts/3.-coder_tools/</link>
      <pubDate>Mon, 18 Jul 2022 23:38:47 +0800</pubDate>
      
      <guid>https://psuvtk.github.io/posts/3.-coder_tools/</guid>
      <description>VSCode :: 编辑器即IDE
Tabby :: 终端工具
MobaXTerm :: 远程工具
oh-my-zsh ::
opengrok :: 代码浏览器,用于阅读源码
BandZip :: 压缩
Beyond Compare :: 比较工具
cloc :: 统计代码行数</description>
    </item>
    
    <item>
      <title></title>
      <link>https://psuvtk.github.io/posts/13.-libco%E5%AE%9A%E6%97%B6%E5%99%A8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://psuvtk.github.io/posts/13.-libco%E5%AE%9A%E6%97%B6%E5%99%A8/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://psuvtk.github.io/posts/14.-go%E8%AF%AD%E8%A8%80gmp%E6%A8%A1%E5%9E%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://psuvtk.github.io/posts/14.-go%E8%AF%AD%E8%A8%80gmp%E6%A8%A1%E5%9E%8B/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
